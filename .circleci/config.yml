version: 2.1
orbs:
  slack: circleci/slack@4.12.1

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: cicd-udacity-project
          template: basic_fail_1

  install_aws_cli:
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible on Ubuntu
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            # First: we install lts version as base
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # Then: we install n version manager to get to required version
            sudo npm install --global n
            sudo n 13.8.0
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<< parameters.Workflow_ID >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Install Node.js 13
            # First: we install lts version as base
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # Then: we install n version manager to get to required version
            sudo npm install --global n
            sudo n 13.8.0

            SUCCESS=$(curl https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            # Revert database changes
            if [[ $SUCCESS==1 ]]
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert > revert_migrations_dump.txt
              cat revert_migrations_dump.txt
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend build
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend build
          command: |
            cd backend
            npm cache verify
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure


  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend unit test
          command: |
            cd frontend
            npm install
            npm test
      - notify_on_failure


  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend unit test
          command: |
            cd backend
            npm install
            npm test
      - notify_on_failure

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure





  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["a2:c5:32:8f:5c:67:d8:84:74:f3:0e:37:18:55:bd:41"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      # Here's where you will add some code to rollback on failure



  run-migrations:
    docker: 
      - image: mareimorsy/aws-node

    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            # export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            cd backend
            npm install
            npm run premigrations
            npm run migrations
      # - run:
      #     name: Send migration results to memstash
      #     command: |
      #       # Your code here
      #       exit 1
     # Here's where you will add some code to rollback on failure  





  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo API_URL=${API_URL} > .env
            cat .env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["a2:c5:32:8f:5c:67:d8:84:74:f3:0e:37:18:55:bd:41"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package backend
          command: |
            cd backend
            export TYPEORM_MIGRATIONS_DIR=./dist/migrations
            export TYPEORM_ENTITIES=./dist/modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./dist/migrations/*{.ts,.js}
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" > .env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=./dist/migrations" >> .env
            echo "TYPEORM_MIGRATIONS=./dist/migrations/*.ts" >> .env
            npm run build
            tar czf artifacts.tar.gz dist/* package* .env
            cd ..
            cp backend/artifacts.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            cd backend
            export TYPEORM_MIGRATIONS_DIR=./dist/migrations
            export TYPEORM_ENTITIES=./dist/modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./dist/migrations/*{.ts,.js}
            cd ..
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_ansible
      - run:
          name: Backend smoke test.
          command: |
            # Get Backend URL
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            # Run the check
            if curl $API_URL/api/status | grep ok
            then

              exit 0
            else
              exit 1
              
            fi

      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com
            echo $FRONTEND_WEBSITE
            if curl -s $FRONTEND_WEBSITE | grep Welcome
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs
      - run:
          name: Save old workflow ID
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo "Old workflow ID: $OLD_WORKFLOW_ID"
            curl -k https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"  
            
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --stack-name "Initial-Stack"
      - destroy-environment
      - revert-migrations
  cleanup:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID 
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
            fi
            
  # cleanup:
  #     docker:
  #       - image: cimg/base:stable
  #     steps:
  #       - checkout
  #       - install_aws_cli
  #       - install_nodejs
  #       - run:
  #           name: Cleanup old stacks and files
  #           command: |
  #             # First: Get old stack workflow id
  #             export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
  #             echo "Old workflow ID: $OldWorkflowID"
  #             # Then: Get stacks list
  #             export STACKS=($(aws cloudformation list-stacks \
  #             --query "StackSummaries[*].StackName" \
  #             --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
  #             echo Stacks list: "${STACKS[@]}"
  #             # Finally: Remove old stacks
  #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #             then
  #               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #             fi
  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: cicd-udacity-project
          template: success_tagged_deploy_1

workflows:  # create workflows
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #    requires: [build-frontend]
      # - test-backend:
      #    requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - notify_on_success:
      #    requires:
      #    - test-frontend
      #    - test-backend
      #    - scan-frontend
      #    - scan-backend    

      # - deploy-infrastructure: 

          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [main]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      - deploy-frontend
      #     requires: [deploy-infrastructure]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
